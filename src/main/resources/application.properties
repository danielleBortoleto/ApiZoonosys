spring.application.name=demo

# =======================================
# CONFIGURAÇÃO DO BANCO DE DADOS (POSTGRESQL)
# =======================================

# URL de conexão JDBC para PostgreSQL
# Formato: jdbc:postgresql://<host>:<porta>/<nome_do_banco>
spring.datasource.url=jdbc:postgresql://localhost:5432/meu_banco_api

# Usuário e senha do banco de dados
spring.datasource.username=meu_usuario
spring.datasource.password=minha_senha_segura

# Driver a ser utilizado (Boa prática, embora o Spring Boot geralmente infira)
spring.datasource.driver-class-name=org.postgresql.Driver

# =======================================
# CONFIGURAÇÃO DO HIBERNATE (O ELOQUENT DO SPRING)
# =======================================

# (IMPORTANTE!) Gerenciamento automático do schema do banco de dados.
# 'update': Tenta atualizar o schema para corresponder às suas Entidades (@Entity). Ótimo para desenvolvimento.
# 'validate': Valida se o schema corresponde, mas não faz alterações. Bom para produção.
# 'create-drop': Cria o schema ao iniciar e o destrói ao finalizar. Ótimo para testes.
# 'none': Não faz nada.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console o SQL que o Hibernate está executando.
# Equivalente a ativar o log de queries no Laravel. Essencial para debug.
spring.jpa.properties.hibernate.show_sql=true

# Formata o SQL exibido no console para ser mais legível.
spring.jpa.properties.hibernate.format_sql=true